// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using AVFoundation;
using CoreFoundation;

namespace ClipperIOS
{
	public partial class CameraViewController : UIViewController
	{
        private AVCaptureSession captureSession;

        private AVCaptureDevice backCamera;
        private AVCaptureDevice frontCamera;

        private AVCaptureInput frontInput;
        private AVCaptureInput backInput;

        public CameraViewController (IntPtr handle) : base (handle)
		{
		}

        #region Lifecycle
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            SetupView();
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            //Check for permission first
            SetupAndStartCameraSession();
        }
        #endregion

        #region Methods
        public void SetupAndStartCameraSession()
        {
            DispatchQueue.DefaultGlobalQueue.DispatchAsync(() =>
            {
                captureSession = new AVCaptureSession();
                captureSession.BeginConfiguration();

                // do some configs
                if (captureSession.CanSetSessionPreset(new NSString("photo")))
                    captureSession.SessionPreset = new NSString("photo");
                captureSession.AutomaticallyConfiguresCaptureDeviceForWideColor = true;

                SetupInputs();

                captureSession.CommitConfiguration();
                captureSession.StartRunning();

            });

        }

        public void SetupView()
        {

        }

        public void SetupInputs()
        {

            //TODO: if there`s no front or back camera
            frontCamera = AVCaptureDevice.GetDefaultDevice(AVCaptureDeviceType.BuiltInWideAngleCamera, AVMediaTypes.Video, AVCaptureDevicePosition.Front);
            backCamera = AVCaptureDevice.GetDefaultDevice(AVCaptureDeviceType.BuiltInWideAngleCamera, AVMediaTypes.Video, AVCaptureDevicePosition.Back);

            try
            {
                NSError inputError = new NSError();

                var input = new AVCaptureDeviceInput(frontCamera, out inputError);

                if(input != null)
                {
                    frontInput = input;
                }

                input = new AVCaptureDeviceInput(backCamera, out inputError);

                if (input != null)
                {
                    backInput = input;
                }

                if (!captureSession.CanAddInput(frontInput))
                    throw new Exception();

                captureSession.AddInput(frontInput);
            }
            catch
            {
                throw new Exception("Input config error");
            }
            captureSession.AddInput(backInput);

        }
        #endregion
    }
}
