// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using AVFoundation;
using CoreFoundation;
using CoreMedia;
using CoreImage;

namespace ClipperIOS
{
	public partial class CameraViewController : UIViewController, IAVCaptureVideoDataOutputSampleBufferDelegate
	{
        public bool CameraPermisiion;
        private AVCaptureSession captureSession;

        private AVCaptureDevice backCamera;
        private AVCaptureDevice frontCamera;

        private AVCaptureInput frontInput;
        private AVCaptureInput backInput;

        private AVCaptureVideoPreviewLayer previewLayer;

        private AVCaptureVideoDataOutput videoOutput;

        bool takePicture = false;
        bool backCameraOn = true;

        public CameraViewController (IntPtr handle) : base (handle)
		{
		}

        #region Lifecycle
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            
            SetupView();
            backBtn.TouchUpInside += (sender, e) => DismissViewController(false, null);
            takePictureBtn.TouchUpInside += (sender, e) => takePicture = true;
            rotateCameraBtn.TouchUpInside += (sender, e) => SwitchCameraInput();
           
         }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            //Check for permission first
            if (CheckPermission())
            {
                SetupAndStartCameraSession();
                notAvailableLabel.Hidden = true;
            }
            else
                notAvailableLabel.Hidden = false;


        }
        #endregion

        #region Methods

        public bool CheckPermission()
        {
            var permission = AVCaptureDevice.GetAuthorizationStatus(AVAuthorizationMediaType.Video);

            bool returningPermission = false;
            if (!CameraPermisiion)
            {
                if (permission == AVAuthorizationStatus.NotDetermined ||
                    permission == AVAuthorizationStatus.Denied)
                        AVCaptureDevice.RequestAccessForMediaType(AVAuthorizationMediaType.Video, p =>
                        {
                            if (p)
                                returningPermission = true;
                        });
                else
                    returningPermission = true;
            }
            else
                returningPermission = true;
            return returningPermission;
        }

        public void SetupAndStartCameraSession()
        {
            DispatchQueue.DefaultGlobalQueue.DispatchAsync(() =>
            {
                captureSession = new AVCaptureSession();
                captureSession.BeginConfiguration();

                // do some configs
                if (captureSession.CanSetSessionPreset(new NSString("photo")))
                    captureSession.SessionPreset = new NSString("photo");
                captureSession.AutomaticallyConfiguresCaptureDeviceForWideColor = true;

                SetupInputs();

                BeginInvokeOnMainThread(() => SetupPreviewLayer());

                SetupOutput();

                captureSession.CommitConfiguration();
                captureSession.StartRunning();

            });
        }

        public void SetupView()
        {

        }

        public void SetupInputs()
        {

            frontCamera = AVCaptureDevice.GetDefaultDevice(AVCaptureDeviceType.BuiltInWideAngleCamera, AVMediaTypes.Video, AVCaptureDevicePosition.Front);
            backCamera = AVCaptureDevice.GetDefaultDevice(AVCaptureDeviceType.BuiltInWideAngleCamera, AVMediaTypes.Video, AVCaptureDevicePosition.Back);

            try
            {
                NSError inputError = new NSError();

                var input = new AVCaptureDeviceInput(frontCamera, out inputError);

                if(input != null)
                {
                    frontInput = input;
                }

                input = new AVCaptureDeviceInput(backCamera, out inputError);

                if (input != null)
                {
                    backInput = input;
                }

                 if(captureSession.CanAddInput(frontInput))
                    captureSession.AddInput(frontInput);

                 if (captureSession.CanAddInput(backInput))
                    captureSession.AddInput(backInput);
            }
            catch 
            {
                notAvailableLabel.Hidden = false;
            }
        }

        public void SetupOutput()
        {
            videoOutput = new AVCaptureVideoDataOutput();
            var videoQueue = new DispatchQueue("videoQueue"); //qos : .userInteractive
            videoOutput.SetSampleBufferDelegateQueue(this, videoQueue);

            if (captureSession.CanAddOutput(videoOutput))
                captureSession.AddOutput(videoOutput);
            else
                notAvailableLabel.Hidden = false;

            videoOutput.Connections[0].VideoOrientation = AVCaptureVideoOrientation.Portrait;
        }

        public void SetupPreviewLayer()
        {
            previewLayer = new AVCaptureVideoPreviewLayer(captureSession);
            View.Layer.InsertSublayer(previewLayer, 0);
            previewLayer.Frame = View.Layer.Frame;
        }

        public void CaptureOutput(AVCaptureOutput output, CMSampleBuffer buffer, AVCaptureConnection connection)
        {
            if (!takePicture)
                return;

            var cvBuffer = buffer.GetImageBuffer();
            var ciImage = new CIImage(cvBuffer);
            var uiImage = new UIImage(ciImage);

            DispatchQueue.MainQueue.DispatchAsync(() =>
            {
                postImageView.Image = uiImage;
                takePicture = false;
            });
        }

        public void SwitchCameraInput()
        {
            rotateCameraBtn.UserInteractionEnabled = false ;
            captureSession.BeginConfiguration();

            if (backCameraOn)
            {
                captureSession.RemoveInput(backInput);
                captureSession.AddInput(frontInput);
                backCameraOn = false;
            }
            else
            {
                captureSession.RemoveInput(frontInput);
                captureSession.AddInput(backInput);
                backCameraOn = true;
            }
            videoOutput.Connections[0].VideoOrientation = AVCaptureVideoOrientation.Portrait;

            captureSession.CommitConfiguration();

            rotateCameraBtn.UserInteractionEnabled = true;
        }
        #endregion
    }
}
